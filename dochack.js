/* Generated by the Nim Compiler v0.19.9 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI42032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI195074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI45862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI197577 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI81205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI81283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI81281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI81227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI81565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI81229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI83305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI45850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI42006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI60156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI45808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45914 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI42016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI42040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI42042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI45908 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI45826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI45846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45846.node = NNI45846;
var NNI45842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45842.node = NNI45842;
var NNI45828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45828.node = NNI45828;
NTI45908.base = NTI45826;
NTI45914.base = NTI45826;
var NNI45826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI45908, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI42042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI42040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI42040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI42016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI45914, name: "up", sons: null}]};
NTI45826.node = NNI45826;
var NNI45808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45808.node = NNI45808;
NTI45826.base = NTI45808;
NTI45828.base = NTI45826;
NTI45842.base = NTI45828;
NTI45846.base = NTI45842;
var NNI60156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI42042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI42006, name: "Field1", sons: null}]};
NTI60156.node = NNI60156;
var NNI45858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45858.node = NNI45858;
NTI45858.base = NTI45828;
var NNI45850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45850.node = NNI45850;
NTI45850.base = NTI45828;
NTI81561.base = NTI81229;
NTI81563.base = NTI81229;
NTI81565.base = NTI81229;
var NNI81227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI81227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI81227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI81227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI81227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI81227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI81227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI81227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI81227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI81227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI81227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI81227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI81227, name: "NotationNode", len: 0, sons: null}}};
NTI81227.node = NNI81227;
var NNI81283 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI42042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI42042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI42042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI42042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI42042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI42042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI42042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI42042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI42042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI42042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI42042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI42042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI42042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI42042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI42042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI42042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI42042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI42042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI42042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI42042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI42042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI42042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI42042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI42042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI42042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI42042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI42042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI42042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI42042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI42042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI42042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI42042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI42042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI42042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI42042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI42042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI42042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI42042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI42042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI42042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI42042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI42042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI42042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI42042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI42042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI42042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI42042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI42042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI42042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI42042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI42042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI42042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI42042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI42042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI42042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI42042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI42042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI42042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI42042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI42042, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI42042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI42042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI42042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI42042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI42042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI42042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI42042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI42042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI42042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI42042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI42042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI42042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI42042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI42042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI42042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI42042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI42042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI42042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI42042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI42042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI42042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI42042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI42042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI42042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI42042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI42042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI42042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI42042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI42042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI42042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI42006, name: "zIndex", sons: null}]};
NTI81283.node = NNI81283;
NTI81283.base = NTI45808;
NTI81281.base = NTI81283;
var NNI81231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI81561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI81563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI81565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI42042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI81229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI81229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI81229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI42042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI81227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI42042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI81229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI81229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI42042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI81281, name: "style", sons: null}]};
NTI81231.node = NNI81231;
var NNI81205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI81372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI81376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI81380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI81384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI81388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI81392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI81396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI81400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI81404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI81408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI81412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI81416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI81420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI81424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI81428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI81432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI81436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI81440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI81444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI81448, name: "onunload", sons: null}]};
NTI81205.node = NNI81205;
NTI81205.base = NTI45808;
NTI81231.base = NTI81205;
NTI81229.base = NTI81231;
NTI83305.base = NTI81229;
NTI197577.base = NTI42042;
var NNI45862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45862.node = NNI45862;
NTI45862.base = NTI45828;
var NNI195074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI42006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI42032, name: "Field1", sons: null}]};
NTI195074.node = NNI195074;

function makeNimstrLit(c_62058) {
		  var ln = c_62058.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_62058.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_63027, src_63028, ti_63029) {
	var result_63219 = null;

		switch (ti_63029.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_63001(ti_63029))) {
			result_63219 = src_63028;
			}
			else {
				result_63219 = [src_63028[0], src_63028[1]];
			}
			
			break;
		case 19:
			      if (dest_63027 === null || dest_63027 === undefined) {
        dest_63027 = {};
      }
      else {
        for (var key in dest_63027) { delete dest_63027[key]; }
      }
      for (var key in src_63028) { dest_63027[key] = src_63028[key]; }
      result_63219 = dest_63027;
    
			break;
		case 18:
		case 17:
			if (!((ti_63029.base == null))) {
			result_63219 = nimCopy(dest_63027, src_63028, ti_63029.base);
			}
			else {
			if ((ti_63029.kind == 17)) {
			result_63219 = (dest_63027 === null || dest_63027 === undefined) ? {m_type: ti_63029} : dest_63027;
			}
			else {
				result_63219 = (dest_63027 === null || dest_63027 === undefined) ? {} : dest_63027;
			}
			}
			nimCopyAux(result_63219, src_63028, ti_63029.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_63028 === null) {
        result_63219 = null;
      }
      else {
        if (dest_63027 === null || dest_63027 === undefined) {
          dest_63027 = new Array(src_63028.length);
        }
        else {
          dest_63027.length = src_63028.length;
        }
        result_63219 = dest_63027;
        for (var i = 0; i < src_63028.length; ++i) {
          result_63219[i] = nimCopy(result_63219[i], src_63028[i], ti_63029.base);
        }
      }
    
			break;
		case 28:
			      if (src_63028 !== null) {
        result_63219 = src_63028.slice(0);
      }
    
			break;
		default: 
			result_63219 = src_63028;
			break;
		}

	return result_63219;

}

function arrayConstr(len_63286, value_63287, typ_63288) {
		    var result = new Array(len_63286);
    for (var i = 0; i < len_63286; ++i) result[i] = nimCopy(null, value_63287, typ_63288);
    return result;
  

	
}

function cstrToNimstr(c_62075) {
		  var ln = c_62075.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_62075.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_62075.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_62092) {
		  if (s_62092 === null) return "";
  var len = s_62092.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_62092[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_62092[i] < 128)
      asciiPart[i] = fcc(s_62092[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_60618, ename_60619) {
		e_60618.name = ename_60619;
		if ((excHandler == 0)) {
		unhandledException(e_60618);
		}
		
		e_60618.trace = nimCopy(null, raw_write_stack_trace_60468(), NTI42040);
		throw e_60618;

	
}

function addInt(a_62403, b_62404) {
		    var result = a_62403 + b_62404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_63305, a_63306, b_63307) {
			var Tmp1;

	var result_63308 = 0;

	BeforeRet: do {
			if (!(a_63306 <= i_63305)) Tmp1 = false; else {				Tmp1 = (i_63305 <= b_63307);			}		if (Tmp1) {
		result_63308 = i_63305;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_63305, a_63306, b_63307);
		}
		
	} while (false);

	return result_63308;

}

function subInt(a_62421, b_62422) {
		    var result = a_62421 - b_62422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_63324, a_63325, b_63326) {
			var Tmp1;

	var result_63327 = 0;

	BeforeRet: do {
			if (!(a_63325 <= i_63324)) Tmp1 = false; else {				Tmp1 = (i_63324 <= b_63326);			}		if (Tmp1) {
		result_63327 = i_63324;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_63327;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_62439, b_62440) {
		    var result = a_62439 * b_62440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_62758, b_62759) {
		var Tmp1;

	var result_62760 = 0;

	BeforeRet: do {
		if ((b_62759 <= a_62758)) {
		Tmp1 = a_62758;
		}
		else {
		Tmp1 = b_62759;
		}
		
		result_62760 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_62760;

}

function nimMin(a_62740, b_62741) {
		var Tmp1;

	var result_62742 = 0;

	BeforeRet: do {
		if ((a_62740 <= b_62741)) {
		Tmp1 = a_62740;
		}
		else {
		Tmp1 = b_62741;
		}
		
		result_62742 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_62742;

}
var nim_program_result = 0;
var global_raise_hook_57618 = [null];
var local_raise_hook_57623 = [null];
var out_of_mem_hook_57626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_197315 = [null];

function is_fat_pointer_63001(ti_63003) {
	var result_63004 = false;

	BeforeRet: do {
		result_63004 = !((ConstSet1[ti_63003.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_63004;

}

function nimCopyAux(dest_63032, src_63033, n_63035) {
		switch (n_63035.kind) {
		case 0:
			break;
		case 1:
			      dest_63032[n_63035.offset] = nimCopy(dest_63032[n_63035.offset], src_63033[n_63035.offset], n_63035.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_63035.sons.length; i++) {
      nimCopyAux(dest_63032, src_63033, n_63035.sons[i]);
    }
    
			break;
		case 3:
			      dest_63032[n_63035.offset] = nimCopy(dest_63032[n_63035.offset], src_63033[n_63035.offset], n_63035.typ);
      for (var i = 0; i < n_63035.sons.length; ++i) {
        nimCopyAux(dest_63032, src_63033, n_63035.sons[i][1]);
      }
    
			break;
		}

	
}

function add_57638(x_57641, x_57641_Idx, y_57642) {
		      if (x_57641[x_57641_Idx] === null) { x_57641[x_57641_Idx] = []; }
      var off = x_57641[x_57641_Idx].length;
      x_57641[x_57641_Idx].length += y_57642.length;
      for (var i = 0; i < y_57642.length; ++i) {
        x_57641[x_57641_Idx][off+i] = y_57642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_60151(f_60153) {
					var Tmp3;

	var result_60154 = [null];

		var it_60162 = f_60153;
		var i_60164 = 0;
		var total_60166 = 0;
		var temp_frames_60173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI60156);
		L1: do {
				L2: while (true) {
					if (!!((it_60162 == null))) Tmp3 = false; else {						Tmp3 = (i_60164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_60173[i_60164].Field0 = it_60162.procname;
					temp_frames_60173[i_60164].Field1 = it_60162.line;
					i_60164 += 1;
					total_60166 += 1;
					it_60162 = it_60162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_60162 == null))) break L5;
					total_60166 += 1;
					it_60162 = it_60162.prev;
				}
		} while(false);
		result_60154[0] = nimCopy(null, [], NTI42040);
		if (!((total_60166 == i_60164))) {
		if (result_60154[0] != null) { result_60154[0] = (result_60154[0]).concat(makeNimstrLit("(")); } else { result_60154[0] = makeNimstrLit("("); };
		if (result_60154[0] != null) { result_60154[0] = (result_60154[0]).concat(cstrToNimstr(((total_60166 - i_60164))+"")); } else { result_60154[0] = cstrToNimstr(((total_60166 - i_60164))+"").slice(); };
		if (result_60154[0] != null) { result_60154[0] = (result_60154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_60154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_60421 = 0;
			var colontmp__197456 = 0;
			colontmp__197456 = (i_60164 - 1);
			var res_197461 = colontmp__197456;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_197461)) break L8;
						j_60421 = res_197461;
						add_57638(result_60154, 0, temp_frames_60173[j_60421].Field0);
						if ((0 < temp_frames_60173[j_60421].Field1)) {
						if (result_60154[0] != null) { result_60154[0] = (result_60154[0]).concat(makeNimstrLit(", line: ")); } else { result_60154[0] = makeNimstrLit(", line: "); };
						if (result_60154[0] != null) { result_60154[0] = (result_60154[0]).concat(cstrToNimstr((temp_frames_60173[j_60421].Field1)+"")); } else { result_60154[0] = cstrToNimstr((temp_frames_60173[j_60421].Field1)+"").slice(); };
						}
						
						if (result_60154[0] != null) { result_60154[0] = (result_60154[0]).concat(makeNimstrLit("\x0A")); } else { result_60154[0] = makeNimstrLit("\x0A"); };
						res_197461 -= 1;
					}
			} while(false);
		} while(false);

	return result_60154[0];

}

function raw_write_stack_trace_60468() {
	var result_60470 = null;

		if (!((framePtr == null))) {
		result_60470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_60151(framePtr) || []), NTI42040);
		}
		else {
			result_60470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI42040);
		}
		

	return result_60470;

}

function unhandledException(e_60529) {
		var buf_60530 = [[]];
		if (!(((e_60529.message != null ? e_60529.message.length : 0) == 0))) {
		if (buf_60530[0] != null) { buf_60530[0] = (buf_60530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_60530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_60530[0] != null) { buf_60530[0] = (buf_60530[0]).concat(e_60529.message); } else { buf_60530[0] = e_60529.message.slice(); };
		}
		else {
		if (buf_60530[0] != null) { buf_60530[0] = (buf_60530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_60530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_60530[0] != null) { buf_60530[0] = (buf_60530[0]).concat(makeNimstrLit(" [")); } else { buf_60530[0] = makeNimstrLit(" ["); };
		add_57638(buf_60530, 0, e_60529.name);
		if (buf_60530[0] != null) { buf_60530[0] = (buf_60530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_60530[0] = makeNimstrLit("]\x0A"); };
		if (buf_60530[0] != null) { buf_60530[0] = (buf_60530[0]).concat(raw_write_stack_trace_60468()); } else { buf_60530[0] = raw_write_stack_trace_60468().slice(); };
		var cbuf_60601 = toJSStr(buf_60530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_60601);
  }
  else {
    throw cbuf_60601;
  }
  

	
}

function raiseOverflow() {
		var e_61046 = null;
		e_61046 = {m_type: NTI45846, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_61046.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI42040);
		e_61046.parent = null;
		raiseException(e_61046, "OverflowError");

	
}

function is_whitespace_196654(text_196656) {
		     return !/[^\s]/.test(text_196656);
  

	
}

function is_whitespace_196671(x_196673) {
		var Tmp1;
		var Tmp2;

	var result_196674 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_196673.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_196654(x_196673.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_196673.nodeName == "#comment");		}		result_196674 = Tmp1;
	framePtr = F.prev;

	return result_196674;

}

function raiseIndexError(i_61643, a_61644, b_61645) {
		var e_61649 = null;
		e_61649 = {m_type: NTI45858, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_61649.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_61643)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_61644)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_61645)+"") || []), NTI42040);
		e_61649.parent = null;
		raiseException(e_61649, "IndexError");

	
}

function to_toc_196688(x_196690, father_196691) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_196690.nodeName == "UL")) {
		F.line = 139;
		var f_196710 = {heading: null, kids: [], sortId: (father_196691.kids != null ? father_196691.kids.length : 0), doSort: false};
		F.line = 140;
		var i_196712 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_196712 < x_196690.childNodes.length)) break L2;
					F.line = 142;
					var nxt_196713 = addInt(i_196712, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_196713 < x_196690.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_196671(x_196690.childNodes[nxt_196713]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_196713 = addInt(nxt_196713, 1);
							}
					} while(false);
						if (!(nxt_196713 < x_196690.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_196690.childNodes[i_196712].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_196690.childNodes[i_196712].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_196690.childNodes[nxt_196713].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_196738 = {heading: x_196690.childNodes[i_196712].childNodes[0], kids: [], sortId: (f_196710.kids != null ? f_196710.kids.length : 0), doSort: false};
					F.line = 148;
					var it_196739 = x_196690.childNodes[nxt_196713];
					L9: do {
						F.line = 149;
						var j_196746 = 0;
						F.line = 2638;
						var colontmp__197432 = 0;
						F.line = 149;
						colontmp__197432 = it_196739.childNodes.length;
						F.line = 2639;
						var i_197433 = 0;
						L10: do {
							F.line = 2640;
								L11: while (true) {
								if (!(i_197433 < colontmp__197432)) break L11;
									F.line = 149;
									j_196746 = i_197433;
									F.line = 150;
									to_toc_196688(it_196739.childNodes[j_196746], e_196738);
									F.line = 2642;
									i_197433 = addInt(i_197433, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_196710.kids != null) { f_196710.kids.push(e_196738); } else { f_196710.kids = [e_196738]; };
					F.line = 152;
					i_196712 = addInt(nxt_196713, 1);
					}
					else {
						F.line = 154;
						to_toc_196688(x_196690.childNodes[i_196712], f_196710);
						F.line = 155;
						i_196712 = addInt(i_196712, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_196691.kids != null) { father_196691.kids.push(f_196710); } else { father_196691.kids = [f_196710]; };
		}
		else {
		if (is_whitespace_196671(x_196690)) {
		}
		else {
		if ((x_196690.nodeName == "LI")) {
		F.line = 160;
		var idx_196781 = [];
		L12: do {
			F.line = 161;
			var i_196788 = 0;
			F.line = 2638;
			var colontmp__197437 = 0;
			F.line = 161;
			colontmp__197437 = x_196690.childNodes.length;
			F.line = 2639;
			var i_197438 = 0;
			L13: do {
				F.line = 2640;
					L14: while (true) {
					if (!(i_197438 < colontmp__197437)) break L14;
						F.line = 161;
						i_196788 = i_197438;
						if (!(is_whitespace_196671(x_196690.childNodes[i_196788]))) {
						F.line = 162;
						if (idx_196781 != null) { idx_196781.push(i_196788); } else { idx_196781 = [i_196788]; };
						}
						
						F.line = 2642;
						i_197438 = addInt(i_197438, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_196781 != null ? idx_196781.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_196690.childNodes[idx_196781[chckIndx(1, 0, idx_196781.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_196819 = {heading: x_196690.childNodes[idx_196781[chckIndx(0, 0, idx_196781.length+0-1)-0]], kids: [], sortId: (father_196691.kids != null ? father_196691.kids.length : 0), doSort: false};
		F.line = 166;
		var it_196820 = x_196690.childNodes[idx_196781[chckIndx(1, 0, idx_196781.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_196827 = 0;
			F.line = 2638;
			var colontmp__197443 = 0;
			F.line = 167;
			colontmp__197443 = it_196820.childNodes.length;
			F.line = 2639;
			var i_197444 = 0;
			L17: do {
				F.line = 2640;
					L18: while (true) {
					if (!(i_197444 < colontmp__197443)) break L18;
						F.line = 167;
						j_196827 = i_197444;
						F.line = 168;
						to_toc_196688(it_196820.childNodes[j_196827], e_196819);
						F.line = 2642;
						i_197444 = addInt(i_197444, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_196691.kids != null) { father_196691.kids.push(e_196819); } else { father_196691.kids = [e_196819]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_196841 = 0;
				F.line = 2638;
				var colontmp__197448 = 0;
				F.line = 171;
				colontmp__197448 = x_196690.childNodes.length;
				F.line = 2639;
				var i_197449 = 0;
				L20: do {
					F.line = 2640;
						L21: while (true) {
						if (!(i_197449 < colontmp__197448)) break L21;
							F.line = 171;
							i_196841 = i_197449;
							F.line = 172;
							to_toc_196688(x_196690.childNodes[i_196841], father_196691);
							F.line = 2642;
							i_197449 = addInt(i_197449, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_196691.kids != null) { father_196691.kids.push({heading: x_196690, kids: [], sortId: (father_196691.kids != null ? father_196691.kids.length : 0), doSort: false}); } else { father_196691.kids = [{heading: x_196690, kids: [], sortId: (father_196691.kids != null ? father_196691.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_196337(x_196339, heading_196340, items_196343, items_196343_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_196339 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_196339.heading == null))) Tmp1 = false; else {				Tmp1 = (x_196339.heading.textContent == heading_196340);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_196371 = 0;
			F.line = 2638;
			var colontmp__197473 = 0;
			F.line = 83;
			colontmp__197473 = (x_196339.kids != null ? x_196339.kids.length : 0);
			F.line = 2639;
			var i_197474 = 0;
			L3: do {
				F.line = 2640;
					L4: while (true) {
					if (!(i_197474 < colontmp__197473)) break L4;
						F.line = 83;
						i_196371 = i_197474;
						F.line = 84;
						if (items_196343[items_196343_Idx] != null) { items_196343[items_196343_Idx].push(x_196339.kids[chckIndx(i_196371, 0, x_196339.kids.length+0-1)-0].heading); } else { items_196343[items_196343_Idx] = [x_196339.kids[chckIndx(i_196371, 0, x_196339.kids.length+0-1)-0].heading]; };
						F.line = 2642;
						i_197474 = addInt(i_197474, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_196390 = 0;
				F.line = 2638;
				var colontmp__197478 = 0;
				F.line = 86;
				colontmp__197478 = (x_196339.kids != null ? x_196339.kids.length : 0);
				F.line = 2639;
				var i_197479 = 0;
				L6: do {
					F.line = 2640;
						L7: while (true) {
						if (!(i_197479 < colontmp__197478)) break L7;
							F.line = 86;
							i_196390 = i_197479;
							F.line = 87;
							var it_196391 = x_196339.kids[chckIndx(i_196390, 0, x_196339.kids.length+0-1)-0];
							F.line = 88;
							extract_items_196337(it_196391, heading_196340, items_196343, items_196343_Idx);
							F.line = 2642;
							i_197479 = addInt(i_197479, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_196020(tag_196022, kids_196024) {
	var result_196025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_196025 = document.createElement(toJSStr(tag_196022));
		L1: do {
			F.line = 12;
			var k_196056 = null;
			F.line = 3;
			var i_197496 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_197496 < (kids_196024 != null ? kids_196024.length : 0))) break L3;
						F.line = 12;
						k_196056 = kids_196024[chckIndx(i_197496, 0, kids_196024.length+0-1)-0];
						F.line = 13;
						result_196025.appendChild(k_196056);
						F.line = 6;
						i_197496 = addInt(i_197496, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_196025;

}

function text_196152(s_196154) {
	var result_196155 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_196155 = document.createTextNode(s_196154);
	framePtr = F.prev;

	return result_196155;

}

function sys_fatal_55662(message_55666) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../lib/system/fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_55807 = null;
		F.line = 37;
		e_55807 = {m_type: NTI45850, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_55807.message = nimCopy(null, message_55666, NTI42040);
		F.line = 39;
		raiseException(e_55807, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_55658(msg_55660) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_55662(msg_55660);
	framePtr = F.prev;

	
}

function failed_assert_impl_55855(msg_55857) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_55658(msg_55857);
	framePtr = F.prev;

	
}

function uncovered_196935(x_196937) {
			var Tmp1;
		var Tmp2;

	var result_196938 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_196937.kids != null ? x_196937.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_196937.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_196937.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_196937;
		}
		else {
		Tmp2 = null;
		}
		
		result_196938 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_196938 = {heading: x_196937.heading, kids: [], sortId: x_196937.sortId, doSort: x_196937.doSort};
		L3: do {
			F.line = 197;
			var i_196976 = 0;
			F.line = 2638;
			var colontmp__197508 = 0;
			F.line = 197;
			colontmp__197508 = (x_196937.kids != null ? x_196937.kids.length : 0);
			F.line = 2639;
			var i_197509 = 0;
			L4: do {
				F.line = 2640;
					L5: while (true) {
					if (!(i_197509 < colontmp__197508)) break L5;
						F.line = 197;
						i_196976 = i_197509;
						F.line = 198;
						var y_196977 = uncovered_196935(x_196937.kids[chckIndx(i_196976, 0, x_196937.kids.length+0-1)-0]);
						if (!((y_196977 == null))) {
						F.line = 199;
						if (result_196938.kids != null) { result_196938.kids.push(y_196977); } else { result_196938.kids = [y_196977]; };
						}
						
						F.line = 2642;
						i_197509 = addInt(i_197509, 1);
					}
			} while(false);
		} while(false);
		if (((result_196938.kids != null ? result_196938.kids.length : 0) == 0)) {
		F.line = 200;
		result_196938 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_196938;

}

function merge_tocs_197011(orig_197013, news_197014) {
	var result_197015 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_197015 = uncovered_196935(orig_197013);
		if ((result_197015 == null)) {
		F.line = 205;
		result_197015 = news_197014;
		}
		else {
			L1: do {
				F.line = 207;
				var i_197035 = 0;
				F.line = 2638;
				var colontmp__197502 = 0;
				F.line = 207;
				colontmp__197502 = (news_197014.kids != null ? news_197014.kids.length : 0);
				F.line = 2639;
				var i_197503 = 0;
				L2: do {
					F.line = 2640;
						L3: while (true) {
						if (!(i_197503 < colontmp__197502)) break L3;
							F.line = 207;
							i_197035 = i_197503;
							F.line = 208;
							if (result_197015.kids != null) { result_197015.kids.push(news_197014.kids[chckIndx(i_197035, 0, news_197014.kids.length+0-1)-0]); } else { result_197015.kids = [news_197014.kids[chckIndx(i_197035, 0, news_197014.kids.length+0-1)-0]]; };
							F.line = 2642;
							i_197503 = addInt(i_197503, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_197015;

}

function build_toc_197056(orig_197058, types_197060, procs_197061) {
	var result_197062 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_197076 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_197214 = null;
			F.line = 156;
			var i_197491 = 0;
			F.line = 157;
			var l_197492 = (types_197060 != null ? types_197060.length : 0);
			L2: do {
				F.line = 158;
					L3: while (true) {
					if (!(i_197491 < l_197492)) break L3;
						F.line = 212;
						t_197214 = types_197060[chckIndx(i_197491, 0, types_197060.length+0-1)-0];
						F.line = 213;
						var c_197228 = {heading: t_197214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_197214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_197235 = null;
							F.line = 156;
							var i_197488 = 0;
							F.line = 157;
							var l_197489 = (procs_197061 != null ? procs_197061.length : 0);
							L5: do {
								F.line = 158;
									L6: while (true) {
									if (!(i_197488 < l_197489)) break L6;
										F.line = 215;
										p_197235 = procs_197061[chckIndx(i_197488, 0, procs_197061.length+0-1)-0];
										if (!(p_197235.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_197236 = p_197235.parentNode.getElementsByClassName("attachedType");
										if ((((xx_197236 != null ? xx_197236.length : 0) == 1) && (xx_197236[chckIndx(0, 0, xx_197236.length+0-1)-0].textContent == t_197214.textContent))) {
										F.line = 220;
										var q_197244 = tree_196020(makeNimstrLit("A"), [text_196152(p_197235.title)]);
										F.line = 221;
										q_197244.setAttribute("href", p_197235.getAttribute("href"));
										F.line = 222;
										if (c_197228.kids != null) { c_197228.kids.push({heading: q_197244, kids: [], sortId: 0, doSort: false}); } else { c_197228.kids = [{heading: q_197244, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_197235.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 160;
										i_197488 = addInt(i_197488, 1);
										if (!(((procs_197061 != null ? procs_197061.length : 0) == l_197489))) {
										F.line = 161;
										failed_assert_impl_55855(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_197076.kids != null) { new_stuff_197076.kids.push(c_197228); } else { new_stuff_197076.kids = [c_197228]; };
						F.line = 160;
						i_197491 = addInt(i_197491, 1);
						if (!(((types_197060 != null ? types_197060.length : 0) == l_197492))) {
						F.line = 161;
						failed_assert_impl_55855(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_197062 = merge_tocs_197011(orig_197058, new_stuff_197076);
	framePtr = F.prev;

	return result_197062;

}

function add_196085(parent_196087, kid_196088) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_196087.nodeName == "TR")) Tmp1 = false; else {				if ((kid_196088.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_196088.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_196089 = document.createElement("TD");
		F.line = 19;
		k_196089.appendChild(kid_196088);
		F.line = 20;
		parent_196087.appendChild(k_196089);
		}
		else {
			F.line = 22;
		parent_196087.appendChild(kid_196088);
		}
		
	framePtr = F.prev;

	
}

function set_class_196103(e_196105, value_196106) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_196105.setAttribute("class", toJSStr(value_196106));
	framePtr = F.prev;

	
}

function to_html_196420(x_196422, is_root_196423) {
			var Tmp1;

		function HEX3Aanonymous_196463(a_196465, b_196466) {
					var Tmp1;

			var result_196467 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_196465.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_196466.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_196484 = a_196465.heading.textContent;
				F.line = 107;
				var y_196485 = b_196466.heading.textContent;
				if ((x_196484 < y_196485)) {
				F.line = 108;
				result_196467 = -1;
				break BeforeRet;
				}
				
				if ((y_196485 < x_196484)) {
				F.line = 109;
				result_196467 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_196467 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_196467 = subInt(a_196465.sortId, b_196466.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_196467;

		}

	var result_196424 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_196422 == null)) {
		F.line = 91;
		result_196424 = null;
		break BeforeRet;
		}
		
		if (((x_196422.kids != null ? x_196422.kids.length : 0) == 0)) {
		if ((x_196422.heading == null)) {
		F.line = 93;
		result_196424 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_196424 = x_196422.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_196424 = tree_196020(makeNimstrLit("DIV"), []);
			if (!!((x_196422.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_196422.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_196085(result_196424, x_196422.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_196460 = tree_196020(makeNimstrLit("UL"), []);
		if (is_root_196423) {
		F.line = 100;
		set_class_196103(ul_196460, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_196103(ul_196460, makeNimstrLit("simple"));
		}
		
		if (x_196422.doSort) {
		F.line = 104;
		x_196422.kids.sort(HEX3Aanonymous_196463);
		}
		
		L2: do {
			F.line = 115;
			var k_196614 = null;
			F.line = 154;
			var colontmp__197515 = null;
			F.line = 115;
			colontmp__197515 = x_196422.kids;
			F.line = 156;
			var i_197517 = 0;
			F.line = 157;
			var l_197518 = (colontmp__197515 != null ? colontmp__197515.length : 0);
			L3: do {
				F.line = 158;
					L4: while (true) {
					if (!(i_197517 < l_197518)) break L4;
						F.line = 115;
						k_196614 = colontmp__197515[chckIndx(i_197517, 0, colontmp__197515.length+0-1)-0];
						F.line = 116;
						var y_196615 = to_html_196420(k_196614, false);
						if (!((y_196615 == null))) {
						F.line = 118;
						add_196085(ul_196460, tree_196020(makeNimstrLit("LI"), [y_196615]));
						}
						
						F.line = 160;
						i_197517 = addInt(i_197517, 1);
						if (!(((colontmp__197515 != null ? colontmp__197515.length : 0) == l_197518))) {
						F.line = 161;
						failed_assert_impl_55855(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_196460.childNodes.length == 0))) {
		F.line = 119;
		add_196085(result_196424, ul_196460);
		}
		
		if ((result_196424.childNodes.length == 0)) {
		F.line = 120;
		result_196424 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_196424;

}

function replace_by_id_196172(id_196174, new_tree_196175) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_196176 = document.getElementById(id_196174);
		F.line = 33;
		x_196176.parentNode.replaceChild(new_tree_196175, x_196176);
		F.line = 34;
		new_tree_196175.id = id_196174;
	framePtr = F.prev;

	
}

function togglevis_197329(d_197331) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_197331.style.display == 'none')
      d_197331.style.display = 'inline';
    else
      d_197331.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_197347) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_197348 = document.getElementById("toc-list");
		if ((alternative_197315[0] == null)) {
		F.line = 240;
		var tt_197367 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_196688(toc_197348, tt_197367);
		F.line = 242;
		tt_197367 = tt_197367.kids[chckIndx(0, 0, tt_197367.kids.length+0-1)-0];
		F.line = 244;
		var types_197382 = [[]];
		F.line = 245;
		var procs_197397 = [[]];
		F.line = 247;
		extract_items_196337(tt_197367, "Types", types_197382, 0);
		F.line = 248;
		extract_items_196337(tt_197367, "Procs", procs_197397, 0);
		F.line = 249;
		extract_items_196337(tt_197367, "Converters", procs_197397, 0);
		F.line = 250;
		extract_items_196337(tt_197367, "Methods", procs_197397, 0);
		F.line = 251;
		extract_items_196337(tt_197367, "Templates", procs_197397, 0);
		F.line = 252;
		extract_items_196337(tt_197367, "Macros", procs_197397, 0);
		F.line = 253;
		extract_items_196337(tt_197367, "Iterators", procs_197397, 0);
		F.line = 255;
		var ntoc_197405 = build_toc_197056(tt_197367, types_197382[0], procs_197397[0]);
		F.line = 256;
		var x_197406 = to_html_196420(ntoc_197405, true);
		F.line = 257;
		alternative_197315[0] = tree_196020(makeNimstrLit("DIV"), [x_197406]);
		}
		
		if ((value_197347 == "type")) {
		F.line = 259;
		replace_by_id_196172("tocRoot", alternative_197315[0]);
		}
		else {
			F.line = 261;
		replace_by_id_196172("tocRoot", tree_196020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_197329(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_197521 = [null];
var contents_197523 = [null];
var oldtoc_197957 = [null];
var timer_197958 = [null];

function raiseRangeError() {
		var e_61445 = null;
		e_61445 = {m_type: NTI45862, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_61445.message = nimCopy(null, makeNimstrLit("value out of range"), NTI42040);
		e_61445.parent = null;
		raiseException(e_61445, "RangeError");

	
}

function nsuToLowerAsciiChar(c_184980) {
	var result_184981 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"../../lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_184980] != undefined)) {
		F.line = 222;
		result_184981 = chckRange(addInt(c_184980, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_184981 = c_184980;
		}
		
	framePtr = F.prev;

	return result_184981;

}

function fuzzy_match_195070(pattern_195072, str_195073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_195077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_195078 = -100;
		F.line = 38;
		var header_matched_195079 = false;
		F.line = 39;
		var unmatched_leading_char_count_195081 = 0;
		F.line = 40;
		var consecutive_match_count_195083 = 0;
		F.line = 41;
		var str_index_195085 = 0;
		F.line = 42;
		var pat_index_195087 = 0;
		F.line = 43;
		var score_195089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_195085 < (str_195073 != null ? str_195073.length : 0)) && (pat_index_195087 < (pattern_195072 != null ? pattern_195072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_195096 = nsuToLowerAsciiChar(pattern_195072.charCodeAt(chckIndx(pat_index_195087, 0, pattern_195072.length+0-1)-0));
						F.line = 52;
						var str_char_195097 = nsuToLowerAsciiChar(str_195073.charCodeAt(chckIndx(str_index_195085, 0, str_195073.length+0-1)-0));
						if ((ConstSet3[pattern_char_195096] != undefined)) {
						F.line = 56;
						pat_index_195087 = addInt(pat_index_195087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_195097] != undefined)) {
						F.line = 59;
						str_index_195085 = addInt(str_index_195085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_195079) && (str_char_195097 == 58))) {
						F.line = 65;
						header_matched_195079 = true;
						F.line = 66;
						score_state_195078 = -100;
						F.line = 67;
						score_195089 = Math.trunc(Math.floor((5.0000000000000000e-01 * score_195089)));
						F.line = 68;
						pat_index_195087 = 0;
						F.line = 69;
						str_index_195085 = addInt(str_index_195085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_195097 == pattern_char_195096)) {
						F.line = 73;
						switch (score_state_195078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_195078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_195078 = 5;
							F.line = 78;
							score_195089 = addInt(score_195089, score_state_195078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_195083 = addInt(consecutive_match_count_195083, 1);
							F.line = 82;
							score_state_195078 = 5;
							F.line = 83;
							score_195089 = addInt(score_195089, mulInt(5, consecutive_match_count_195083));
							if ((score_state_195078 == 10)) {
							F.line = 86;
							score_195089 = addInt(score_195089, 10);
							}
							
							F.line = 88;
							var on_boundary_195172 = (pat_index_195087 == (pattern_195072 != null ? (pattern_195072.length-1) : -1));
							if ((!(on_boundary_195172) && (str_index_195085 < (str_195073 != null ? (str_195073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_195173 = nsuToLowerAsciiChar(pattern_195072.charCodeAt(chckIndx(addInt(pat_index_195087, 1), 0, pattern_195072.length+0-1)-0));
							F.line = 92;
							var next_str_char_195174 = nsuToLowerAsciiChar(str_195073.charCodeAt(chckIndx(addInt(str_index_195085, 1), 0, str_195073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_195174] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_195174 == next_pattern_char_195173));							}							on_boundary_195172 = Tmp4;
							}
							
							if (on_boundary_195172) {
							F.line = 100;
							score_state_195078 = 20;
							F.line = 100;
							score_195089 = addInt(score_195089, score_state_195078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_195073.charCodeAt(chckIndx(subInt(str_index_195085, 1), 0, str_195073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_195073.charCodeAt(chckIndx(subInt(str_index_195085, 1), 0, str_195073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_195073.charCodeAt(chckIndx(str_index_195085, 0, str_195073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_195212 = Tmp5;
							if (is_leading_char_195212) {
							F.line = 110;
							score_state_195078 = 10;
							}
							else {
								F.line = 114;
								score_state_195078 = 0;
								F.line = 114;
								score_195089 = addInt(score_195089, score_state_195078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_195087 = addInt(pat_index_195087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_195078) {
							case -100:
								F.line = 120;
								score_state_195078 = -3;
								F.line = 120;
								score_195089 = addInt(score_195089, score_state_195078);
								break;
							case 5:
								F.line = 123;
								score_state_195078 = -1;
								F.line = 123;
								score_195089 = addInt(score_195089, score_state_195078);
								F.line = 124;
								consecutive_match_count_195083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_195081 < 3)) {
								F.line = 128;
								score_state_195078 = -3;
								F.line = 128;
								score_195089 = addInt(score_195089, score_state_195078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_195081 = addInt(unmatched_leading_char_count_195081, 1);
								break;
							default: 
								F.line = 132;
								score_state_195078 = -1;
								F.line = 132;
								score_195089 = addInt(score_195089, score_state_195078);
								break;
							}
						}
						
						F.line = 134;
						str_index_195085 = addInt(str_index_195085, 1);
					} while(false);
				}
		} while(false);
		F.line = 137;
		var colontmp__198061 = nimMax(0, score_195089);
		F.line = 138;
		var colontmp__198062 = (0 < score_195089);
		F.line = 136;
		nimCopy(result_195077, {Field0: colontmp__198061, Field1: colontmp__198062}, NTI195074);
	framePtr = F.prev;

	return result_195077;

}

function text_196120(s_196122) {
	var result_196123 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_196123 = document.createTextNode(toJSStr(s_196122));
	framePtr = F.prev;

	return result_196123;

}

function dosearch_197555(value_197557) {

		function HEX3Aanonymous_197870(a_197879, b_197880) {
			var result_197884 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_197884 = subInt(b_197880["Field1"], a_197879["Field1"]);
			framePtr = F.prev;

			return result_197884;

		}

	var result_197558 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_197521[0] != null ? db_197521[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_197564 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_197564 = doc.documentElement;
    
		F.line = 286;
		db_197521[0] = nimCopy(null, stuff_197564.getElementsByClassName("reference"), NTI83305);
		F.line = 287;
		contents_197523[0] = nimCopy(null, [], NTI197577);
		L1: do {
			F.line = 288;
			var ahref_197814 = null;
			F.line = 156;
			var i_198041 = 0;
			F.line = 157;
			var l_198042 = (db_197521[0] != null ? db_197521[0].length : 0);
			L2: do {
				F.line = 158;
					L3: while (true) {
					if (!(i_198041 < l_198042)) break L3;
						F.line = 288;
						ahref_197814 = db_197521[0][chckIndx(i_198041, 0, db_197521[0].length+0-1)-0];
						F.line = 289;
						if (contents_197523[0] != null) { contents_197523[0].push(ahref_197814.getAttribute("data-doc-search-tag")); } else { contents_197523[0] = [ahref_197814.getAttribute("data-doc-search-tag")]; };
						F.line = 160;
						i_198041 = addInt(i_198041, 1);
						if (!(((db_197521[0] != null ? db_197521[0].length : 0) == l_198042))) {
						F.line = 161;
						failed_assert_impl_55855(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_197825 = tree_196020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_197558 = tree_196020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_196103(result_197558, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_197844 = [];
		L4: do {
			F.line = 294;
			var i_197856 = 0;
			F.line = 2638;
			var colontmp__198048 = 0;
			F.line = 294;
			colontmp__198048 = (db_197521[0] != null ? db_197521[0].length : 0);
			F.line = 2639;
			var i_198049 = 0;
			L5: do {
				F.line = 2640;
					L6: while (true) {
					if (!(i_198049 < colontmp__198048)) break L6;
						F.line = 294;
						i_197856 = i_198049;
						L7: do {
							F.line = 295;
							var c_197857 = contents_197523[0][chckIndx(i_197856, 0, contents_197523[0].length+0-1)-0];
							if (((c_197857 == "Examples") || (c_197857 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__198058 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_197858 = 0;
							F.line = 301;
							var matched_197859 = false;
							F.line = 301;
							nimCopy(colontmp__198058, fuzzy_match_195070(value_197557, c_197857), NTI195074);
							F.line = 301;
							score_197858 = colontmp__198058["Field0"];
							F.line = 301;
							matched_197859 = colontmp__198058["Field1"];
							if (matched_197859) {
							F.line = 303;
							if (matches_197844 != null) { matches_197844.push({Field0: db_197521[0][chckIndx(i_197856, 0, db_197521[0].length+0-1)-0], Field1: score_197858}); } else { matches_197844 = [{Field0: db_197521[0][chckIndx(i_197856, 0, db_197521[0].length+0-1)-0], Field1: score_197858}]; };
							}
							
						} while(false);
						F.line = 2642;
						i_198049 = addInt(i_198049, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_197844.sort(HEX3Aanonymous_197870);
		L8: do {
			F.line = 306;
			var i_197922 = 0;
			F.line = 2638;
			var colontmp__198054 = 0;
			F.line = 306;
			colontmp__198054 = nimMin((matches_197844 != null ? matches_197844.length : 0), 19);
			F.line = 2639;
			var i_198055 = 0;
			L9: do {
				F.line = 2640;
					L10: while (true) {
					if (!(i_198055 < colontmp__198054)) break L10;
						F.line = 306;
						i_197922 = i_198055;
						F.line = 307;
						matches_197844[chckIndx(i_197922, 0, matches_197844.length+0-1)-0]["Field0"].innerHTML = matches_197844[chckIndx(i_197922, 0, matches_197844.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_196085(ul_197825, tree_196020(makeNimstrLit("LI"), [matches_197844[chckIndx(i_197922, 0, matches_197844.length+0-1)-0]["Field0"]]));
						F.line = 2642;
						i_198055 = addInt(i_198055, 1);
					}
			} while(false);
		} while(false);
		if ((ul_197825.childNodes.length == 0)) {
		F.line = 310;
		add_196085(result_197558, tree_196020(makeNimstrLit("B"), [text_196120(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_196085(result_197558, tree_196020(makeNimstrLit("B"), [text_196120(makeNimstrLit("search results"))]));
			F.line = 313;
			add_196085(result_197558, ul_197825);
		}
		
	framePtr = F.prev;

	return result_197558;

}

function search() {

		function wrapper_197989() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_197991 = document.getElementById("searchInput");
				F.line = 321;
				var value_197992 = elem_197991.value;
				if (!(((value_197992 != null ? value_197992.length : 0) == 0))) {
				if ((oldtoc_197957[0] == null)) {
				F.line = 324;
				oldtoc_197957[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_197998 = dosearch_197555(value_197992);
				F.line = 326;
				replace_by_id_196172("tocRoot", results_197998);
				}
				else {
				if (!((oldtoc_197957[0] == null))) {
				F.line = 328;
				replace_by_id_196172("tocRoot", oldtoc_197957[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_197958[0] == null))) {
		F.line = 330;
		clearTimeout(timer_197958[0]);
		}
		
		F.line = 331;
		timer_197958[0] = setTimeout(wrapper_197989, 400);
	framePtr = F.prev;

	
}
